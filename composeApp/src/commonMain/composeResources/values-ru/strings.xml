<resources>
    <string name="app">Hello Code Hub</string>

    <string-array name="detailed_tabs">
        <item>Описание</item>
        <item>Особенности</item>
        <item>Плюсы и минусы</item>
    </string-array>

    <!-- Парадигмы -->

    <string name="name_origin">Происхождение названия</string>
    <string name="development_start">Начало разработки</string>
    <string name="first_release">Первый выпуск</string>
    <string name="hello_world">Привет, мир</string>

    <string name="code_copied">Код скопирован</string>
    <string name="no_lang">Такого языка пока нет</string>

    <string-array name="paradigms">
        <item>Ассемблерный</item>
        <item>Блочно-структурированный</item>
        <item>Кросс-платформенный</item>
        <item>Ориентированный на данные</item>
        <item>Декларативный</item>
        <item>Функциональный</item>
        <item>Обобщенный</item>
        <item>Высокоуровневый</item>
        <item>Императивный</item>
        <item>Логический</item>
        <item>Низкоуровневый</item>
        <item>Разметочный</item>
        <item>Многопарадигменный</item>
        <item>Объектно-ориентированный</item>
        <item>Параллельный</item>
        <item>Процедурный</item>
        <item>Рефлексивный</item>
        <item>Скриптовый</item>
    </string-array>

    <string-array name="paradigm_descriptions">
        <item>Ассемблерная: Программирование на языке ассемблера, которое позволяет работать с инструкциями низкого уровня процессора, обеспечивая высокую производительность и контроль над оборудованием.</item>
        <item>Блочно-структурированная: Стиль программирования, использующий блочную структуру для управления областью видимости переменных и контроля потока программы.</item>
        <item>Кросс-платформенная: Разработка программного обеспечения, совместимого с несколькими операционными системами или устройствами, позволяя одному и тому же коду работать на разных платформах.</item>
        <item>Ориентированная на данные: Парадигма, сосредоточенная на организации и управлении данными, а не на логике их обработки.</item>
        <item>Декларативная: Подход, при котором разработчик указывает, что должно быть сделано, а не как это сделать. Пример: SQL, где запрос описывает результат, а не последовательность операций.</item>
        <item>Функциональная: Парадигма, которая сосредоточена на использовании чистых функций и неизменяемых данных для решения задач, поддерживает функции высшего порядка и рекурсию.</item>
        <item>Обобщенная: Использование обобщений для работы с типами данных, которые определяются во время компиляции, позволяя переиспользовать код для разных типов.</item>
        <item>Высокоуровневая: Парадигмы, абстрагирующие многие детали управления оборудованием, делая код более читаемым и понятным. Примеры: Python, Java.</item>
        <item>Императивная: Стиль, при котором программа указывает последовательные шаги для выполнения задачи, фокусируясь на "как" это делать, а не "что" должно быть сделано.</item>
        <item>Логическая: Программирование на основе логики, где разработчик определяет факты и правила, а система делает выводы. Пример: Prolog.</item>
        <item>Низкоуровневая: Парадигмы, близкие к машинному коду и процессору, предоставляющие максимальный контроль над ресурсами, но требующие глубоких знаний о системе.</item>
        <item>Разметка: Способ разметки данных, используемый для описания структуры и внешнего вида текста или документов. Пример: HTML, XML.</item>
        <item>Многопарадигменная: Поддержка нескольких парадигм в одном языке, что позволяет использовать подходящий стиль программирования в зависимости от задачи.</item>
        <item>Объектно-ориентированная: Парадигма, ориентированная на объекты, которые являются комбинацией данных и методов, упрощая модульное и многократно используемое программирование.</item>
        <item>Параллельная: Парадигма, направленная на параллельное выполнение задач для повышения производительности, особенно на многоядерных системах.</item>
        <item>Процедурная: Программирование, основанное на процедурах или функциях, которые выполняют последовательные шаги и изменяют состояние программы.</item>
        <item>Рефлексивная: Возможность программы анализировать и изменять свое поведение во время выполнения. Пример: языки с поддержкой рефлексии, такие как Java.</item>
        <item>Скриптовая: Использование сценариев для автоматизации задач или быстрого выполнения операций, часто используется в веб-разработке и системном администрировании.</item>
    </string-array>

    <string name="pros">Плюсы</string>
    <string name="cons">Минусы</string>

    <string name="features">Особенности</string>
    <string name="designStyle">Стиль дизайна</string>
    <string name="fileExtensions">Расширения файлов</string>
    <string name="community">Сообщество</string>
    <string name="future">Будущее</string>

    <string name="ideSupport">Поддержка IDE</string>
    <string name="popularFrameworks">Популярные фреймворки</string>
    <string name="compatibility">Совместимость</string>
    <string name="relatedLanguages">Связанные языки</string>
</resources>
